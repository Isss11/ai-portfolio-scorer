Score the following code (denoted "file 1" to "file 2") on code readability out of 10, in the format "Readability: a number/10". Than score the following code on object-oriented principles out of 10, in the format "OOP: a number/10". Than score the following code on maintainability out of 10, in the format "Maintainability: a number/10".  Return it as a JSON response (with the feedback included) in the format and list that at the top of the response. Output any feedback as the value under a 'feedback' key under each score key. An example of the desired JSON output is below. Score all the files with a single score. 

{'readability': {'score': 8, 'feedback': 'The code is generally well-formatted and uses clear variable names. Docstrings are present, but type hints could improve readability further. Consider using a dictionary comprehension in getGeneralInfo for a more concise approach.'}, 'oop': {'score': 7, 'feedback': 'The code demonstrates basic OOP concepts like encapsulation and abstraction. However, reusability can be improved by adding methods for retrieving more data or calculations.'}, 'maintainability': {'score': 8, 'feedback': 'The code has good modularity due to the class structure. Error handling and unit tests would further enhance maintainability.'}} <script setup> import { ref } from 'vue'; const props = defineProps(['realized', 'forecasted', 'ticker', 'forecastLength']); const getDataRealized = () => { return { labels: props.realized.date, datasets: [ {  label: props.ticker + " Approx. Returns (%)",  backgroundColor: '#f87979',  data: props.realized.returns, } ] } } const getDataForecasted = () => { return { labels: props.forecasted.date, datasets: [ {  label: props.ticker + " Approx. Returns (%)",  backgroundColor: '#e81481',  data: props.forecasted.returns, } ] } } const getOptionsRealized = () => { return { scales: {  y: {  suggestedMin: -15,  suggestedMax: 15  } } } } const getOptionsForecasted = () => { return { scales: {  y: {  suggestedMin: -0.5,  suggestedMax: 0.5  } } } } </script> <script> import {Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title,Tooltip,Legend} from 'chart.js' import { ref } from 'vue'; import { Line } from 'vue-chartjs' ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip,Legend) </script> <template> <h3>Realized Returns (approximated)</h3> <Line :data="getDataRealized()" :options="getOptionsRealized()"/> <h3>Forecasted Returns ({{ props.forecastLength }}-day forecast, approximated)</h3> <Line :data="getDataForecasted()" :options="getOptionsForecasted()"/> </template> import pandas as pd import yfinance as yf import json # Class that returns basic stock information about the selected stock class StockDetail: def __init__(self, ticker) -> None:  self.stock = yf.Ticker(ticker)    # Returning relevant information from Yahoo Finance API def getGeneralInfo(self):  generalInfo = dict()  generalInfo["tickerSymbol"] = self.stock.info['underlyingSymbol']  generalInfo["name"] = self.stock.info["shortName"]  generalInfo["price"] = self.stock.info["currentPrice"]  generalInfo["currency"] = self.stock.info["financialCurrency"]     return generalInfo   if __name__ == "__main__": stock = StockDetail("C") print(stock.getGeneralInfo())